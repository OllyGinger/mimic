# The Sharp LR35902 (AKA SM83) is the CPU that's found inside the original Gameboy. This is almost the same as a Z80, but 
# there are some gameboy specifc differences.
#
# This file describes the rules in these pages;
#   https://gbdev.io/gb-opcodes/optables/octal
#   http://www.z80.info/decoding.htm
#
#
# This CPU had blocks of 256 opcodes. For each opcode index, we split out some components in this form:
#
# MSB    (opcode idx bits)     LSB
# [7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 ]
# \      /\         /\          /
#    x         y           z
#         |      |   |
#         |   p  | q |
#
# X = Opcode 1st octal digit (bits 7-6)
# Y = Opcode 2nd octal digit (bits 5-3)
# Z = Opcode 3rd octal digit (bits 2-0)
# P = Y right shift one position (bits 5-4)
# Q = Y modulo 2 (bit 3)

# Quadrant 1
HALT: 
  encoding: (x == 1 && y == 6 && z == 6)
  action: self.halt();

LD $RY, $RZ:
  encoding: (x == 1 && y != 6 && z != 6)
  mcycle_duration: 1
  action: 
    self.registers.inc_pc(1);
    self.registers.set_$RY(self.registers.$RZ()); 

LD (HL), $RZ:
  encoding: (x == 1 && y == 6 && z != 6)
  mcycle_duration: 2
  action: 
    self.registers.inc_pc(1);
    self.mmu.write8(self.registers.hl(), self.registers.$RZ()); 

LD $RY, (HL):
  encoding: (x == 1 && y != 6 && z == 6)
  mcycle_duration: 2
  action: 
    self.registers.inc_pc(1);
    self.registers.set_$RY(self.mmu.read8(self.registers.hl()));

# Quadrant 2
$ALU (HL):
  encoding: (x == 2) && (z == 6)
  mcycle_duration: 2
  action:
    self.registers.inc_pc(1);
    self.alu_$ALU(self.mmu.read8(self.registers.hl()));

$ALU $RZ:
  encoding: (x == 2) && (z != 6)
  mcycle_duration: 1
  action:
    self.registers.inc_pc(1);
    self.alu_$ALU(self.registers.$RZ());

# Quadrant 0
NOP:
  encoding: (x == 0 && y == 0 && z == 0)
  action:
    self.registers.inc_pc(1);

INC $RY:
  encoding: (x == 0 && y != 6 && z == 4)
  action:
    self.registers.inc_pc(1);
    self.registers.set_$RY(self.registers.$RY().wrapping_add(1)); 

DEC $RY:
  encoding: (x == 0 && y != 6 && z == 5)
  action:
    self.registers.inc_pc(1);
    self.registers.set_$RY(self.registers.$RY().wrapping_sub(1)); 